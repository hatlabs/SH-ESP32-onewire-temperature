; PlatformIO Project Configuration File
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]

default_envs = shesp32

[env]

; Options common for all working environments

;; Uncomment and change these if PlatformIO can't auto-detect the ports
;monitor_port = /dev/tty.usbserial-310
;upload_port = /dev/tty.usbserial-310
; Lower the upload speed to 115200 if you have problems with uploading
upload_speed = 2000000
monitor_speed = 115200

lib_deps =
    SignalK/SensESP @ >=3.0.0,<4.0.0-alpha.1
    SensESP/OneWire@^3.0.2
    adafruit/Adafruit SSD1306@^2.5.1
    ttlappalainen/NMEA2000-library@^4.17.2
    NMEA2000_twai=https://github.com/skarlsson/NMEA2000_twai
    ; Add any additional dependencies here

build_flags =
    ; Max (and default) debugging level in Arduino ESP32 Core
    -D CORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_VERBOSE
    ; Use the ESP-IDF logging library - required by SensESP.
    -D USE_ESP_IDF_LOG

; This line defines the partition table to use. "min_spiffs" has two app
; partitions, one for OTA updates and one for the running app, but the
; SPIFFS filesystem is quite small. For 8 MB flash boards such as HALMET,
; you can use "default_8MB.csv" instead.

board_build.partitions = min_spiffs.csv

;; Uncomment the following lines to use Over-the-air (OTA) Updates
;upload_protocol = espota
;upload_port = IP_ADDRESS_OF_ESP_HERE
;upload_flags =
;  --auth=YOUR_OTA_PASSWORD

; You shouldn't need to touch the settings in this section below this line.

build_unflags =
    -Werror=reorder
monitor_filters = esp32_exception_decoder

test_build_src = true
check_tool = clangtidy
check_flags =
    clangtidy: --fix --format-style=file --config-file=.clang-tidy


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Platform configurations follow

[arduino]

platform = espressif32 @ ^6.9.0
framework = arduino

lib_ignore =
    esp_websocket_client

build_flags =
    ${env.build_flags}
    ; Arduino Core bug workaround: define the log tag for the Arduino
    ; logging macros.
    -D TAG='"Arduino"'

[pioarduino]

platform = https://github.com/pioarduino/platform-espressif32/releases/download/stable/platform-espressif32.zip
framework = arduino

; The library.json format doesn't support dependencies conditional on the
; platform version, so we have to use the lib_deps option to specify the
; esp_websocket_client library only for the ESP-IDF framework.

lib_deps =
    ${env.lib_deps}
    esp_websocket_client=https://components.espressif.com/api/downloads/?object_type=component&object_id=dbc87006-9a4b-45e6-a6ab-b286174cb413

build_flags =
    ${env.build_flags}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Board configurations follow

[esp32]

board = esp32dev
build_flags =
    ${env.build_flags}
    -D BUTTON_BUILTIN=0
    -D LED_BUILTIN=2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Individual board configurations

[env:shesp32]

extends = pioarduino, esp32
build_flags =
    ${pioarduino.build_flags}
    ${esp32.build_flags}
